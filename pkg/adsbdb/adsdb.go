package adsbdb

import (
	"encoding/json"
	"errors"
	"net/http"
	"strings"
)

const (
	apiPath = `https://api.adsbdb.com/v0/callsign/`
)

type AutoGenerated struct {
	Response struct {
		Flightroute struct {
			Callsign     string `json:"callsign"`
			CallsignIcao string `json:"callsign_icao"`
			CallsignIata string `json:"callsign_iata"`
			Airline      struct {
				Name       string `json:"name"`
				Icao       string `json:"icao"`
				Iata       string `json:"iata"`
				Country    string `json:"country"`
				CountryIso string `json:"country_iso"`
				Callsign   string `json:"callsign"`
			} `json:"airline"`
			Origin struct {
				CountryIsoName string  `json:"country_iso_name"`
				CountryName    string  `json:"country_name"`
				Elevation      int     `json:"elevation"`
				IataCode       string  `json:"iata_code"`
				IcaoCode       string  `json:"icao_code"`
				Latitude       float64 `json:"latitude"`
				Longitude      float64 `json:"longitude"`
				Municipality   string  `json:"municipality"`
				Name           string  `json:"name"`
			} `json:"origin"`
			Destination struct {
				CountryIsoName string  `json:"country_iso_name"`
				CountryName    string  `json:"country_name"`
				Elevation      int     `json:"elevation"`
				IataCode       string  `json:"iata_code"`
				IcaoCode       string  `json:"icao_code"`
				Latitude       float64 `json:"latitude"`
				Longitude      float64 `json:"longitude"`
				Municipality   string  `json:"municipality"`
				Name           string  `json:"name"`
			} `json:"destination"`
		} `json:"flightroute"`
	} `json:"response"`
}

func Get(code string) (*AutoGenerated, error) {
	req, err := http.NewRequest("GET", strings.TrimSpace(apiPath+code), nil)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", "application/json")
	res, err := http.DefaultClient.Do(req)
	if err != nil {
		return nil, err
	}

	defer res.Body.Close()

	if res.StatusCode != http.StatusOK {
		return nil, errors.New(res.Status)
	}

	dec := json.NewDecoder(res.Body)

	du := &AutoGenerated{}
	err = dec.Decode(du)
	return du, err
}
